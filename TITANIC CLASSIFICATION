{"cells":[{"cell_type":"markdown","metadata":{"id":"HvHQMnF__mcG"},"source":["**TASK 1**\n","\n","**TITLE: TITANIC CLASSIFICATION**\n","\n","For building a Titanic classification system that predicts whether a person would survive the sinking, taking into account factors such as socio-economic status, age, gender, and more. This code will handle data loading, preprocessing, feature engineering, model training, evaluation, and making predictions.\n","\n","Classification\n","I will use Random Forest Classifier. Random forests is a supervised learning algorithm. It can be used both for classification and regression. It is also the most flexible and easy to use algorithm.\n","\n","An Overview of Random Forests\n","Random forests are a popular supervised machine learning algorithm.\n","\n","Random forests are for supervised machine learning, where there is a labeled target variable.\n","Random forests can be used for solving regression (numeric target variable) and classification (categorical target variable) problems.\n","Random forests are an ensemble method, meaning they combine predictions from other models.\n","Each of the smaller models in the random forest ensemble is a decision tree."]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1719309305361,"user":{"displayName":"Sanjana MS","userId":"15271781075740147198"},"user_tz":-330},"id":"-eDpdlUm9mGX","outputId":"0e713981-510b-43f2-8ea2-09034beb735a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8156424581005587\n","[[90 15]\n"," [18 56]]\n","              precision    recall  f1-score   support\n","\n","           0       0.83      0.86      0.85       105\n","           1       0.79      0.76      0.77        74\n","\n","    accuracy                           0.82       179\n","   macro avg       0.81      0.81      0.81       179\n","weighted avg       0.81      0.82      0.82       179\n","\n","Submission file created!\n","      Feature  Importance\n","5    Sex_male    0.273316\n","4        Fare    0.272058\n","1         Age    0.252745\n","0      Pclass    0.078616\n","2       SibSp    0.052192\n","3       Parch    0.038490\n","7  Embarked_S    0.023095\n","6  Embarked_Q    0.009488\n"]}],"source":["#titanic classification using random forest classifer\n","#import libraries\n","import pandas as pd\n","import numpy as np\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","\n","# import datasets\n","train_data = pd.read_csv('train.csv')\n","test_data = pd.read_csv('test.csv')\n","\n","# Data Preprocessing\n","def preprocess_data(data):\n","    # Fill missing values for 'Age' with the median age\n","    data['Age'].fillna(data['Age'].median(), inplace=True)\n","\n","    # Fill missing values for 'Embarked' with the mode\n","    data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)\n","\n","    # Fill missing values for 'Fare' in the test set with the median fare\n","    data['Fare'].fillna(data['Fare'].median(), inplace=True)\n","\n","    # Drop the 'Cabin' column due to a large number of missing values\n","    data.drop('Cabin', axis=1, inplace=True)\n","\n","    # Convert categorical columns to numerical ones using pd.get_dummies\n","    data = pd.get_dummies(data, columns=['Sex', 'Embarked'], drop_first=True)\n","    return data\n","\n","# Preprocess train and test data\n","train_data = preprocess_data(train_data)\n","test_data = preprocess_data(test_data)\n","\n","# Drop unnecessary columns\n","train_data.drop(['Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)\n","test_data.drop(['Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)\n","\n","# Standardize the feature columns\n","scaler = StandardScaler()\n","train_data[['Age', 'Fare']] = scaler.fit_transform(train_data[['Age', 'Fare']])\n","test_data[['Age', 'Fare']] = scaler.transform(test_data[['Age', 'Fare']])\n","\n","# Define the features and target\n","X_train = train_data.drop('Survived', axis=1)\n","y_train = train_data['Survived']\n","\n","# Split the training data for validation\n","X_train_split, X_valid, y_train_split, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n","\n","# Train the model\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","model.fit(X_train_split, y_train_split)\n","\n","# Predict on the validation set\n","y_pred = model.predict(X_valid)\n","\n","# Evaluate the model\n","print(f'Accuracy: {accuracy_score(y_valid, y_pred)}')\n","print(confusion_matrix(y_valid, y_pred))\n","print(classification_report(y_valid, y_pred))\n","\n","# Predict on the test set\n","test_predictions = model.predict(test_data)\n","\n","# Prepare the submission file\n","submission = pd.DataFrame({'PassengerId': pd.read_csv('test.csv')['PassengerId'], 'Survived': test_predictions})\n","submission.to_csv('submission.csv', index=False)\n","print(\"Submission file created!\")\n","\n","# Feature Importance\n","feature_importances = pd.DataFrame({'Feature': X_train.columns, 'Importance': model.feature_importances_})\n","feature_importances = feature_importances.sort_values(by='Importance', ascending=False)\n","print(feature_importances)\n"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOX72DpHTjF5edwzONB7/fh"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}